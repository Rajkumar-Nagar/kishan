// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phoneNumber String  @unique
  email       String?
  address     String
  password    String
  licence     Boolean @default(false)

  aadhar_number     String?
  current_location  String?
  additional_number String?
  aadharphotos      String[] @default([])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
  bids      Bids[]

  @@map("users")
}

model Product {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  pesonalInfo          User               @relation(fields: [pesonalInfoId], references: [id],onDelete: Cascade)
  pesonalInfoId        String             @db.ObjectId
  ProductInfo          ProductInfo        @relation(fields: [productInfoId], references: [id],onDelete: Cascade)
  productInfoId        String             @db.ObjectId
  locationInfo         LocationInfo       @relation(fields: [locationInfoId], references: [id],onDelete: Cascade)
  locationInfoId       String             @db.ObjectId
  qualityMetrics       QualityMetrics     @relation(fields: [qualityMetricsId], references: [id],onDelete: Cascade)
  qualityMetricsId     String             @db.ObjectId
  harvestStorage       HarvestStorage     @relation(fields: [harvestStorageId], references: [id],onDelete: Cascade)
  harvestStorageId     String             @db.ObjectId
  media                Media              @relation(fields: [mediaId], references: [id],onDelete: Cascade)
  mediaId              String             @db.ObjectId
  additionalServices   AdditionalServices @relation(fields: [additionalServicesId], references: [id],onDelete: Cascade)
  additionalServicesId String             @db.ObjectId
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model ProductInfo {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  cropName          String
  variety           String
  quantityAvailable String
  expectedPrice     String
  units             String    @default("kg")
  isSold            Boolean   @default(false)
  Product           Product[]
}

model LocationInfo {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  districtCity String    
  state        String
  city         String
  village      String
  pincode      String
  Product      Product[]
}

model QualityMetrics {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  moistureContent String?
  grainSize       String?
  color           String
  purity          String
  Product         Product[]
}

model HarvestStorage {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  harvestDate     DateTime
  storageLocation String
  Product         Product[]
}

model Media {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  photos  String[]
  videos  String[]
  Product Product[]
}

model AdditionalServices {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sampleRequest Boolean   @default(false)
  liveStreaming Boolean   @default(false)
  Product       Product[]
}
