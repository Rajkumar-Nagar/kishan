generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "prismaSchemaFolder", "omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  BIDDER
  ADMIN
}

enum MandiType {
  MINI_MANDI
  ALL_INDIA_MANDI
  OTHER
}

enum LicenceStatus {
  APPLIED
  APPROVED
  REJECTED
}

model User {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  phoneNumber        String         @unique @map("phone_number")
  email              String?
  address            String
  password           String
  avatar             String?
  backgroundImage    String?        @map("background_image")
  role               Role           @default(USER)
  aadharNumber       String?        @map("aadhar_number")
  currentLocation    String?        @map("current_location")
  additionalNumber   String?        @map("additional_number")
  aadharPhotos       String[]       @map("aadhar_photos")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  bids               Bids[]
  savedProducts      SavedProduct[]
  products           Product[]
  biddingInformation BidDetails[]
  licence            Licence[]

  @@map("users")
}

model Product {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  personalInfo         User               @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  personalInfoId       String             @map("personal_info_id") @db.ObjectId
  productInfo          ProductInfo        @relation(fields: [productInfoId], references: [id], onDelete: Cascade)
  productInfoId        String             @map("product_info_id") @db.ObjectId
  locationInfo         LocationInfo       @relation(fields: [locationInfoId], references: [id], onDelete: Cascade)
  locationInfoId       String             @map("location_info_id") @db.ObjectId
  qualityMetrics       QualityMetrics     @relation(fields: [qualityMetricsId], references: [id], onDelete: Cascade)
  qualityMetricsId     String             @map("quality_metrics_id") @db.ObjectId
  harvestStorage       HarvestStorage     @relation(fields: [harvestStorageId], references: [id], onDelete: Cascade)
  harvestStorageId     String             @map("harvest_storage_id") @db.ObjectId
  media                Media              @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId              String             @map("media_id") @db.ObjectId
  additionalServices   AdditionalServices @relation(fields: [additionalServicesId], references: [id], onDelete: Cascade)
  additionalServicesId String             @map("additional_services_id") @db.ObjectId
  token                 String?
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  biddingDetails       BidDetails[]
  savedProducts        SavedProduct[]

  @@index([token])
}

model Licence {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  mandiType       MandiType     @map("mandi_type")
  mandiState      String?       @map("mandi_state")
  madiDistrict    String?       @map("mandi_district")
  state           String
  district        String
  village         String
  city            String
  pincode         String
  work            String
  income          String
  storagePlace    String        @map("storage_place")
  storageLocation String        @map("storage_location")
  storageImages   String[]      @map("storage_images")
  declaration     Boolean       @default(false)
  terms_condition Boolean       @default(false) @map("terms_condition")
  status          LicenceStatus @default(APPLIED)
  token           String @unique @default("Sdf")
  userId          String        @map("user_id") @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("user_id") @db.ObjectId
  productId String  @map("product_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductInfo {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  cropName          String    @map("crop_name")
  variety           String
  quantityAvailable String    @map("quantity_available")
  expectedPrice     String    @map("expected_price")
  units             String    @default("kg")
  isSold            Boolean   @default(false)
  product           Product[]
}

model LocationInfo {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  districtCity String?   @map("district_city")
  state        String
  city         String
  village      String
  pincode      String
  product      Product[]
}

model QualityMetrics {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  moistureContent String?   @map("moisture_content")
  grainSize       String?   @map("grain_size")
  color           String
  purity          String
  product         Product[]
}

model HarvestStorage {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  harvestDate     DateTime  @map("harvest_date")
  storageLocation String    @map("storage_location")
  product         Product[]
}

model Media {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  photos  String[]
  videos  String[]
  product Product[]
}

model AdditionalServices {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sampleRequest Boolean   @default(false) @map("sample_request")
  liveStreaming Boolean   @default(false) @map("live_streaming")
  product       Product[]
}
